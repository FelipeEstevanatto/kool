scripts:
  # Helper for local development
  # compiling and installing locally
  dev:
    - kool run compile
    - kool run install
  # Runs go CLI with proper version for kool development (targets host OS passing down GOOS)
  go: kool docker --volume=kool_gopath:/go --env='GOOS=$GOOS' golang:1.18 go
  # Runs go CLI with Linux, independent of host OS
  go:linux: kool docker --volume=kool_gopath:/go golang:1.18 go
  # Compiling kool itself. In case you are on MacOS make sure to have your .env
  # file properly setting GOOS=darwin so you will be able to use the binary.
  compile:
    - kool run fmt
    - kool run go build -o kool
  install:
    - mv kool /usr/local/bin/kool
  fmt: kool run go:linux fmt ./...
  lint: kool docker --volume=kool_gopath:/go golangci/golangci-lint:v1.46.0 golangci-lint run -v
  test: kool run test:path ./...
  test:path: kool run go:linux test -race
  test-coverage: kool run go:linux test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
  # Generate documentation for kool commands
  make-docs:
    - rm -f docs/4-Commands/*.md
    - kool run go:linux run docs.go
  # build docker image locally
  docker:build: docker build --build-arg BUILD_VERSION=0.0.0-test --pull -t kooldev/kool:test .
